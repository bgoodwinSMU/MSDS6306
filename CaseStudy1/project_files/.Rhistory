if(buzzbrews[i,9]==styleCount[j,1]){
buzzbrews[i,8]=styleCount[j,2]
}
}
}
}
#View(styleCount)
#View(buzzbrews)
#Now do it all again for ABV
#Calculate average ABV for each style and add it to df
#outer loop for all the beers
AlcSum <- 0
AlcVeerCount <- 0
i <- 1
for (i in 1:iterations) {
if(is.na(buzzbrews[i,7])) {
buzzbrews[i,7]=0
}
#inner for each style
for (j in 1:100) {
if(buzzbrews[i,9]==styleCount[j,1]){
#Compute ALC sum
styleCount[j,7] <- styleCount[j,7]+buzzbrews[i,7]*100
#Total of each beer count
styleCount[j,6] <- styleCount[j,6]+1
if(buzzbrews[i,7]==0){
styleCount[j,6] <- styleCount[j,6]-1
}
}
#Mean ABV for each style
styleCount[j,5] <- (styleCount[j,7]/styleCount[j,6])/100
}
}
#Add average column from style count to buzzbrews df
for (i in 1:iterations) {
if(buzzbrews[i,7]==0){
for(j in 1:100){
if(buzzbrews[i,9]==styleCount[j,1]){
buzzbrews[i,7]=styleCount[j,5]
}
}
}
}
#kill NaN's for other alcohol types with no hops
i <- 1
for(i in 1:iterations){
if(is.na(buzzbrews[i,8])){
buzzbrews[i,8] <- 0
}
}
#Check out end results
buzzbrews <- merge(buzzbrews, regionData, by = "State")
View(buzzbrews)
# Chunk 6
######################
#                    #
#     Question 4     #
#                    #
######################
#################################################################################################################
#Compute the median alcohol content and international bitterness unit for each state. Plot a bar chart to compare
#################################################################################################################
#Create new DF for this question
q4DF <- buzzbrews
q4DF$State <- trimws(q4DF$State)
#Group by state and compute median ABV
medABVstate <- q4DF %>% group_by(State) %>% summarise_at("ABV",median)
medABVstate$State <- trimws(medABVstate$State)
#testing
#medABVstate
#Group by state and compute median ABV
medIBUstate <- q4DF %>% group_by(State) %>% dplyr::summarise(IBU = median(IBU),n=n())
medIBUstate$State <- trimws(medIBUstate$State)
#testing
medIBUstate
#Combine dfs into one
combineddf <- merge(medABVstate,medIBUstate,by="State")
combineddf
#change to DF
combineddf <- as.data.frame(combineddf)
#Change column names
combineddf <- dplyr::rename(combineddf, "Median ABV" = "ABV", "Median IBU"="IBU", "State Beer Count"="n")
#testing
names(combineddf)
head(combineddf)
#Create bar plot for ABV
#Sort ABV
#remove = sortedABV <- combineddf[order(combineddf$`Median ABV`), ]
#This line is to retain sort in plot
#remove - sortedABV$State <- factor(sortedABV$State, levels = sortedABV$State)
# Draw plot
ggplot(combineddf, aes(x=reorder(State, `Median ABV`), y=`Median ABV`)) +   geom_bar(stat="identity", width=.5, fill="#c8102e") +
geom_text(aes(label = `Median ABV`), hjust = "center", vjust= -.4, size = 3) +
labs(title = "Median ABV by State in the USA",
subtitle = "Budweiser Consultation",
y = "Median Alcoholic Content by Volume of Beer",
x = "State by ABV Median Score",
caption = "ABV imputed where necessary.") +
theme_minimal() +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
##### Create bar plot for IBU #####
#Sort IBU
#remove - sortedIBU <- combineddf[order(combineddf$`Median IBU`), ]
#This line is to retain sort in plot
#remove - sortedIBU$State <- factor(sortedIBU$State, levels = sortedIBU$State)
# Draw plot
ggplot(combineddf, aes(x=reorder(State,`Median IBU` ), y=`Median IBU`)) +   geom_bar(stat="identity", width=.5, fill="#c8102e") +
geom_text(aes(label = sprintf("%0.1f", round(`Median IBU`, digits = 1))), hjust =-0.1, vjust=0.3, size = 3, angle = 90) +
labs(title="Median IBU by State in the USA",
subtitle="Budweiser Consultation",
caption="source: IBU. IBU imputed where necessary.",
y = "Median Int'l Bitterness Unit",
x = "State Ordered by Median IBU Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
####################################################
##                                                ##
## Scatterplot Median IBU vs Median ABV by State  ##
##                                                ##
####################################################
## Calculate slope and intercept of line of best fit ##
coef(lm(`Median IBU` ~ `Median ABV`, combineddf))
#  (Intercept) `Median ABV`
#   14.5377926    0.4013998
combineddf$State <- trimws(combineddf$State)
ovr_med_IBU <- median(combineddf$`Median IBU`)
ovr_med_ABV <- median(combineddf$`Median ABV`)
ggplot(combineddf,aes(x = `Median ABV`, y = `Median IBU`, color = State)) +
geom_point(show.legend = FALSE) +
geom_abline(intercept = 14.5377926 , slope = 0.4013998 , color = "#c8102E", size = 1)+   geom_text(data = subset(combineddf,`Median IBU` > 40 | `Median ABV` < 4.5, select = c(State, `Median IBU`, `Median ABV`)), aes(label = State), vjust= -0.6, size = 3, na.rm = TRUE, show.legend = FALSE, color = "#000000") +
theme_classic() +
labs(title = "Media ABV vs Median IBU",
subtitle = "Budweiser Consultation",
x = "Median Alcoholic By Vol",
y = "Median Int'l Bitterness Unit",
caption = "NOTE: Missing ABV and IBU values imputed")
# Chunk 7
######################
#                    #
#     Question 5     #
#                    #
######################
#############################################################################################################
#Which state has the maximum alcoholic (ABV) beer? Which state has the most bitter (IBU) beer?
#############################################################################################################
#Figure out which has highest ABV
maxABV <- arrange(buzzbrews, desc(ABV))
print(maxABV[1,4])
#Figure out which has highest IBU
maxIBU <- arrange(buzzbrews,desc(IBU))
print(maxIBU[1,4])
#Colorado wins for ABV, Oregon for IBU
######################################
###### Create DF for just the max ABV values ######
hABV <- buzzbrews %>%
group_by(State) %>%
count(MaxABV = max(ABV), sort = TRUE)
hABV <- hABV[,-3]
hABV <- as.data.frame(hABV)
hABV$State <- trimws(hABV$State)
hABV$MaxABV <- as.numeric(hABV$MaxABV)
hABV <- hABV[order(-hABV$MaxABV),]
str(hABV)
hABV
###### Plot for Max ABV ######
hABV %>%
ggplot(aes(x=reorder(State, MaxABV), y= MaxABV)) +
geom_col(show.legend = FALSE, fill = "#c8102E", position = position_dodge(width = 1), na.rm = TRUE) +
geom_text(aes(label = MaxABV), hjust =-0.2, vjust=.4, size = 3, angle= 90) +
theme_bw() +
theme(axis.text=element_text(size = 8, angle=65, hjust= .7)) +
labs(title = "Max ABV by State in the USA",
subtitle = "Budweiser Consultation",
y = "Max Alcohol By Volume by State",
x = "State by Max ABV",
caption="ABV imputed where necessary.") +
theme_classic()
###### Create DF for just the max IBU values ######
hIBU <- buzzbrews %>%
group_by(State) %>%
count(MaxIBU = max(IBU), sort = TRUE)
hIBU <- as.data.frame(hIBU)
hIBU <- hIBU[order(-hIBU$MaxIBU),]
str(hIBU)
hIBU <- hIBU[,-3]
hIBU
##### Chart Max IBU #####
hIBU %>%
ggplot(aes(x=reorder(State, MaxIBU), y= MaxIBU)) +
geom_col(show.legend = FALSE, fill = "#c8102E", position = position_dodge(width = 1), na.rm = TRUE) +
geom_text(aes(label = MaxIBU), hjust =-0.2, vjust=.4, size = 3, angle= 90) +
theme_bw() +
theme(axis.text=element_text(size = 8, angle=65, hjust= .7)) +
labs(title = "Max IBU by State in the USA",
subtitle = "Budweiser Consultation",
y = "Max Int'l Bitterness Unit by State",
x = "State by Max IBU",
caption="ABV imputed where necessary.") +
theme_classic()
# Chunk 8
######################
#                    #
#     Question 6     #
#                    #
######################
#############################################################################################################
#Comment on the summary statistics and distribution of the ABV variable.
#############################################################################################################
#Original Code: hist(buzzbrews$ABV)
#Original Code: summary(buzzbrews$ABV)
#ABVsummary <- summary(buzzbrews$ABV)
#ABVSumNames <- names(ABVsummary)
#ABVsummary <- unname(ABVsummary)
#ABVsum <- as.data.frame(ABVsummary, ABVSumNames)
#ABVsum <- rename(ABVsum, "Summary"="", "Value"="ABVsummary")
### Boxplot of ABV in general with imputed values ###
buzzbrews %>%
ggplot(aes(y=ABV, fill = "#C8102E")) +
geom_boxplot(show.legend = FALSE, ) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplot of ABV in Beer in the USA",
subtitle = "Budweiser Consultation",
x = "Combined States and Beers",
caption = "Note: Missing ABV and IBU values imputed.")
### Boxplot of ABV by Style with imputed values ###
buzzbrews %>%
ggplot(aes(y=ABV, x = reorder(Style, Style), color = "#c8102E")) +
geom_boxplot(show.legend = FALSE, ) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 7)) +
labs(title = "Boxplots of ABV in Beer by Style in the USA",
subtitle = "Budweiser Consultation",
y = "ABV Values",
x = "Styles of Beer from the Sample",
caption="ABV imputed where necessary.")
# Chunk 9
######################
#                    #
#     Question 7     #
#                    #
######################
#############################################################################################################
#Is there an apparent relationship between the bitterness of the beer and its alcoholic content? Draw a scatter plot.  Make your best judgment of a relationship and EXPLAIN your answer.
#############################################################################################################
## Calculate slope and intercept of line of best fit ##
coef(lm(IBU ~ ABV, buzzbrews))
#  (Intercept)    MaxIBU
#   -14.073285    6.692551
buzzbrews %>%
ggplot(aes(x = ABV, y = IBU, color = "#c8102e")) +
geom_point(show.legend = FALSE, na.rm = TRUE) +
geom_abline(intercept =  -14.073285 , slope = 6.692551, color = "#c8102E", size = 1) +
theme_classic() +
labs(title = "IBU vs ABV",
subtitle = "Budweiser Consultation",
x = "Alcoholic By Vol (where available)",
y = "Int'l Bitterness Unit (where available)",
caption="ABV and IBU values imputed where necessary.")
# Chunk 10
######################
#                    #
#     Question 8     #
#                    #
######################
#############################################################################################################
#Budweiser would also like to investigate the difference with respect to IBU and ABV between IPAs (India Pale Ales) and other types of Ale (any beer with “Ale” in its name other than IPA).  You decide to use KNN classification to investigate this relationship.  Provide statistical evidence one way or the other. You can of course assume your audience is comfortable with percentages … KNN is very easy to understand conceptually
#############################################################################################################
#############################################################################################################
#In addition, while you have decided to use KNN to investigate this relationship (KNN is required) you may also feel free to supplement your response to this question with any other methods or techniques you have learned.  Creativity and alternative solutions are always encouraged.
#############################################################################################################
#Label Ales, IPAs and neither
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bIndiana Pale Ale\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bAle\\b", buzzbrews$Style, ignore.case = TRUE ) ~ "Ale",
TRUE ~ "neither")
view(buzzbrews)
#kNN
iterations = 100
numks = 30
splitPerc = .70
set.seed(33)
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(buzzbrews)[1],round(splitPerc * dim(buzzbrews)[1]))
train = buzzbrews[trainIndices,]
test = buzzbrews[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = i)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
#Best value of k = 3
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = 3)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
#k = sqrt(dim(buzzbrews)[1])
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = sqrt(dim(buzzbrews)[1]))
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5),
IBU = c(78, 65, 55, 38, 100))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
IPAAleSummary <- buzzbrews %>%
group_by(IPAAle) %>%
dplyr::summarise(ABV.min = min(ABV),
ABV.med = median(ABV),
ABV.max = max(ABV),
IBU.min = min(IBU),
IBU.med = median(IBU),
IBU.max = max(IBU))
IPAAleSummary
###############################################
# Based on the output of the knn classifier using 30% of the data as a training set and 70% of the data
# as a test set, we # find that the best value of the nearest neighbor is 3, more than likely as a result
# of a lot of beers having very similar IBU and ABV scores. We were able to accurately classify IPA, Ale
# and neither on average 70% of the time, so there is definitely a relationship between a beers IBU and ABV
# rating and the type of beer it is. We were able to classify IPAs correctly 86% of the time and Ale's 60% of the time (and neither 68% of the time.)
# We also look a look at the ranges for IBU and ABV for each of the 3 broad types of beerL IPA, Ale and neither
# and found
# Chunk 11
######################
#                    #
#     Question 9     #
#                    #
######################
#############################################################################################################
#Knock their socks off!  Find one other useful inference from the data that you feel Budweiser may be able to find value in.  You must convince them why it is important and back up your conviction with appropriate statistical evidence.
#############################################################################################################
?count
hABV <- buzzbrews %>%
group_by(State) %>%
dplyr::count(MaxABV = max(ABV), sort = TRUE)
hABV <- hABV[,-3]
hABV <- as.data.frame(hABV)
hABV$State <- trimws(hABV$State)
hABV$MaxABV <- as.numeric(hABV$MaxABV)
hABV <- hABV[order(-hABV$MaxABV),]
str(hABV)
hABV
hABV %>%
ggplot(aes(x=reorder(State, MaxABV), y= MaxABV)) +
geom_col(show.legend = FALSE, fill = "#c8102E", position = position_dodge(width = 1), na.rm = TRUE) +
geom_text(aes(label = MaxABV), hjust =-0.2, vjust=.4, size = 3, angle= 90) +
theme_bw() +
theme(axis.text=element_text(size = 8, angle=65, hjust= .7)) +
labs(title = "Max ABV by State in the USA",
subtitle = "Budweiser Consultation",
y = "Max Alcohol By Volume by State",
x = "State by Max ABV",
caption="ABV imputed where necessary.") +
theme_classic()
hIBU <- buzzbrews %>%
group_by(Division) %>%
count(MaxIBU = max(IBU), sort = TRUE)
hIBU <- as.data.frame(hIBU)
hIBU <- hIBU[order(-hIBU$MaxIBU),]
str(hIBU)
hIBU <- hIBU[,-3]
hIBU
hIBU <- buzzbrews %>%
group_by(Division) %>%
dplyr::count(MaxIBU = max(IBU), sort = TRUE)
hIBU <- as.data.frame(hIBU)
hIBU <- hIBU[order(-hIBU$MaxIBU),]
str(hIBU)
hIBU <- hIBU[,-3]
hIBU
hIBU <- buzzbrews %>%
group_by(State) %>%
dplyr::count(MaxIBU = max(IBU), sort = TRUE)
hIBU <- as.data.frame(hIBU)
hIBU <- hIBU[order(-hIBU$MaxIBU),]
str(hIBU)
hIBU <- hIBU[,-3]
hIBU
hIBU %>%
ggplot(aes(x=reorder(State, MaxIBU), y= MaxIBU)) +
geom_col(show.legend = FALSE, fill = "#c8102E", position = position_dodge(width = 1), na.rm = TRUE) +
geom_text(aes(label = MaxIBU), hjust =-0.2, vjust=.4, size = 3, angle= 90) +
theme_bw() +
theme(axis.text=element_text(size = 8, angle=65, hjust= .7)) +
labs(title = "Max IBU by State in the USA",
subtitle = "Budweiser Consultation",
y = "Max Int'l Bitterness Unit by State",
x = "State by Max IBU",
caption="ABV imputed where necessary.") +
theme_classic()
hIBU$MaxIBU <- round(hIBU$MaxIBU, digits = 2)
hIBU
hIBU %>%
ggplot(aes(x=reorder(State, MaxIBU), y= MaxIBU)) +
geom_col(show.legend = FALSE, fill = "#c8102E", position = position_dodge(width = 1), na.rm = TRUE) +
geom_text(aes(label = MaxIBU), hjust =-0.2, vjust=.4, size = 3, angle= 90) +
theme_bw() +
theme(axis.text=element_text(size = 8, angle=65, hjust= .7)) +
labs(title = "Max IBU by State in the USA",
subtitle = "Budweiser Consultation",
y = "Max Int'l Bitterness Unit by State",
x = "State by Max IBU",
caption="ABV imputed where necessary.") +
theme_classic()
######################
#                    #
#     Question 8     #
#                    #
######################
#############################################################################################################
#Budweiser would also like to investigate the difference with respect to IBU and ABV between IPAs (India Pale Ales) and other types of Ale (any beer with “Ale” in its name other than IPA).  You decide to use KNN classification to investigate this relationship.  Provide statistical evidence one way or the other. You can of course assume your audience is comfortable with percentages … KNN is very easy to understand conceptually
#############################################################################################################
#############################################################################################################
#In addition, while you have decided to use KNN to investigate this relationship (KNN is required) you may also feel free to supplement your response to this question with any other methods or techniques you have learned.  Creativity and alternative solutions are always encouraged.
#############################################################################################################
#Label Ales, IPAs and neither
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bIndiana Pale Ale\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bAle\\b", buzzbrews$Style, ignore.case = TRUE ) ~ "Ale",
TRUE ~ "neither")
view(buzzbrews)
#kNN
iterations = 100
numks = 30
splitPerc = .70
set.seed(33)
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(buzzbrews)[1],round(splitPerc * dim(buzzbrews)[1]))
train = buzzbrews[trainIndices,]
test = buzzbrews[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = i)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
#Best value of k = 3
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = 3)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
#k = sqrt(dim(buzzbrews)[1])
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = sqrt(dim(buzzbrews)[1]))
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5),
IBU = c(78, 65, 55, 38, 100))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
IPAAleSummary <- buzzbrews %>%
group_by(IPAAle) %>%
dplyr::summarise(ABV.min = min(ABV),
ABV.med = median(ABV),
ABV.max = max(ABV),
IBU.min = min(IBU),
IBU.med = median(IBU),
IBU.max = max(IBU))
IPAAleSummary
###############################################
# Based on the output of the knn classifier using 30% of the data as a training set and 70% of the data
# as a test set, we # find that the best value of the nearest neighbor is 3, more than likely as a result
# of a lot of beers having very similar IBU and ABV scores. We were able to accurately classify IPA, Ale
# and neither on average 70% of the time, so there is definitely a relationship between a beers IBU and ABV
# rating and the type of beer it is. We were able to classify IPAs correctly 86% of the time and Ale's 60% of the time (and neither 68% of the time.)
# We also look a look at the ranges for IBU and ABV for each of the 3 broad types of beerL IPA, Ale and neither
# and found
sapply(buzzbrews, function(x) sum(is.na(x)))
sapply(buzzbrews, function(x) sum(0))
colSums(buzzbrews==0)/nrow(buzzbrews)*100
res <- colSums(buzzbrews==0)/nrow(buzzbrews)*100
res
IPAAleSummary <- buzzbrews %>%
group_by(Division) %>%
group_by(IPAAle) %>%
dplyr::summarise(ABV.min = min(ABV),
ABV.med = median(ABV),
ABV.max = max(ABV),
IBU.min = min(IBU),
IBU.med = median(IBU),
IBU.max = max(IBU))
IPAAleSummary
?groups
IPAAleSummary <- buzzbrews %>%
group_by(IPAAle) %>%
dplyr::summarise(ABV.min = min(ABV),
ABV.med = median(ABV),
ABV.max = max(ABV),
IBU.min = min(IBU),
IBU.med = median(IBU),
IBU.max = max(IBU))
IPAAleSummary
R. version.
R.version()
Version()
r.
R.Version()
