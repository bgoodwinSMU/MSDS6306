trainIndices = sample(1:dim(buzzbrews)[1],round(splitPerc * dim(buzzbrews)[1]))
train = buzzbrews[trainIndices,]
test = buzzbrews[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = i)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
####### Best value of k = 3 ##############################
####### Train the model using k = 3 #####################
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = 3)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = 3)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
############ Testing to see if we can get a better result than the k predictor ##########
#k = sqrt(dim(buzzbrews)[1])
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = sqrt(dim(buzzbrews)[1]))
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
############ K=3 vs K=SQRT(n) Results ########################
# Test results are about the same between using the SQRT of the total number of
# beers observed and our measured best result for K
####### Test the Classifier with some random data ###
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5),
IBU = c(78, 65, 55, 38, 100))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
############ Test Results #######################
#Classification:  IPA       IPA       neither   Ale       IPA
#Probability:     0.6666667 1.0000000 0.3333333 0.3333333 1.0000000
##################################################
############# Summary data by classification #############
IPAAleSummary <- buzzbrews %>%
group_by(IPAAle) %>%
dplyr::summarise(ABV.min = min(ABV),
ABV.med = median(ABV),
ABV.max = max(ABV),
IBU.min = min(IBU),
IBU.med = median(IBU),
IBU.max = max(IBU))
IPAAleSummary
###############################################
# Based on the output of the knn classifier using 30% of the data as a training set and 70% of the data
# as a test set, we find that the best number of nearest neighbors is 3 (less noise in the model), more
# than likely as a result of a lot of beers having very similar IBU and ABV scores. We were able to
# accurately classify IPA, Ale and neither on average 70% of the time, so there is definitely a
# relationship between a beers IBU and ABV rating and the type of beer it is. We were able to classify
# IPAs correctly 86% of the time and Ale's 60% of the time (and neither 68% of the time.)
# We also look a look at the ranges for IBU and ABV for each of the 3 broad types of beers IPA, Ale or "neither"
# and found the following results, showing that it should be more difficult to predict an from a beer that is
# neither an IPA or an Ale
# IPAAle  ABV.min ABV.med ABV.max IBU.min IBU.med IBU.max
# Ale         3.5    5.5      9.9       0    29.9     115
# IPA         2.7    6.8      9.9      30    67.6     138
# neither     0.1    5.33    12.8       0    23.4     100
# Chunk 11
######################
#                    #
#     Question 9     #
#                    #
######################
#############################################################################################################
#Knock their socks off!  Find one other useful inference from the data that you feel Budweiser may be able to find value in.  You must convince them why it is important and back up your conviction with appropriate statistical evidence.
#############################################################################################################
coef(lm(ABV ~ ABU, buzzbrews))
coef(lm(ABV ~ IBU, buzzbrews))
comparisonCoef <- coef(lm(ABV ~ IBU, buzzbrews))
comparisonCoef <- coef(lm(ABV ~ IBU, buzzbrews))
comparisonCoef
str(comparisonCoef)
comparisonCoef[1]
buzzbrews %>%
ggplot(aes(x = IBU, y = ABV, color = "#c8102e")) +
geom_point(show.legend = FALSE, na.rm = TRUE) +
geom_abline(intercept =  comparisonCoef[1] , slope = comparisonCoef[2], color = "#c8102E", size = 1) +
theme_classic() +
labs(title = "IBU vs ABV",
subtitle = "Budweiser Consultation",
x = "Alcoholic By Vol (where available)",
y = "Int'l Bitterness Unit (where available)",
caption="ABV and IBU values imputed where necessary.")
buzzbrews %>%
ggplot(aes(x = IBU, y = ABV, color = "#c8102e")) +
geom_point(show.legend = FALSE, na.rm = TRUE) +
geom_abline(intercept =  comparisonCoef[1] , slope = comparisonCoef[2], color = "#c8102E", size = 1) +
theme_classic() +
labs(title = "IBU vs ABV",
subtitle = "Budweiser Consultation",
Y = "Alcoholic By Vol (where available)",
x = "Int'l Bitterness Unit (where available)",
caption="ABV and IBU values imputed where necessary.")
buzzbrews %>%
ggplot(aes(x = IBU, y = ABV, color = "#c8102e")) +
geom_point(show.legend = FALSE, na.rm = TRUE) +
geom_abline(intercept =  comparisonCoef[1] , slope = comparisonCoef[2], color = "#c8102E", size = 1) +
theme_classic() +
labs(title = "IBU vs ABV",
subtitle = "Budweiser Consultation",
y = "Alcoholic By Vol",
x = "Int'l Bitterness Unit",
caption="ABV and IBU values imputed where necessary.")
buzzbrews %>%
ggplot(aes(x = IBU, y = ABV, color = "#c8102e")) +
geom_point(show.legend = FALSE, na.rm = TRUE) +
geom_abline(intercept =  comparisonCoef[1] , slope = comparisonCoef[2], color = "#c8102E", size = 1) +
theme_classic() +
labs(title = "IBU vs ABV",
subtitle = "Budweiser Consultation",
y = "Alcoholic By Volume",
x = "Int'l Bitterness Unit",
caption="ABV and IBU values imputed where necessary.")
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = 7)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = 3)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 48, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
grepl("\\bale\\b", "Lee Hill Series Vol. 5 - Belgian Style Quadrupel Ale", ignore.case = TRUE)
)
grepl("\\bale\\b", "Lee Hill Series Vol. 5 - Belgian Style Quadrupel Ale", ignore.case = TRUE)
)
buzzbrews$IPAAle <- ""
view(buzzbrews)
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bindiana pale ale\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bale\\b", buzzbrews$Style, ignore.case = TRUE ) ~ "Ale",
TRUE ~ "neither")
view(buzzbrews)
buzzbrews$IPAAle <- ""
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bindiana pale ale\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bale\\b", buzzbrews$Style, ignore.case = TRUE ) ~ "Ale",
~ "neither")
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bindiana pale ale\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bale\\b", buzzbrews$Style, ignore.case = TRUE ) ~ "Ale",
FALSE ~ "neither")
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bindiana pale ale\\b", buzzbrews$Style, ignore.case = TRUE) ~ "IPA",
grepl("\\bale\\b", buzzbrews$Style, ignore.case = TRUE ) ~ "Ale",
TRUE ~ "neither")
view(buzzbrews)
buzzbrews$IPAAle <- ""
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Beer, ignore.case = TRUE) ~ "IPA",
grepl("\\bindiana pale ale\\b", buzzbrews$Beer, ignore.case = TRUE) ~ "IPA",
grepl("\\bale\\b", buzzbrews$Btyle, ignore.case = TRUE ) ~ "Ale",
FALSE ~ "neither")
view(buzzbrews)
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Beer, ignore.case = TRUE) ~ "IPA",
grepl("\\bindiana pale ale\\b", buzzbrews$Beer, ignore.case = TRUE) ~ "IPA",
grepl("\\bale\\b", buzzbrews$Beer, ignore.case = TRUE ) ~ "Ale",
FALSE ~ "neither")
view(buzzbrews)
buzzbrews$IPAAle <- ""
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Beer, ignore.case = TRUE) ~ "IPA",
grepl("\\bindia pale ale\\b", buzzbrews$Beer, ignore.case = TRUE) ~ "IPA",
grepl("\\bale\\b", buzzbrews$Beer, ignore.case = TRUE ) ~ "Ale",
TRUE ~ "neither")
view(buzzbrews)
iterations = 100
numks = 30
splitPerc = .70
set.seed(33)
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(buzzbrews)[1],round(splitPerc * dim(buzzbrews)[1]))
train = buzzbrews[trainIndices,]
test = buzzbrews[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = i)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
max(MeanAcc)
max(MeanAcc)
str(MeanAcc)
match(max(MeanAcc),x)
match(max(MeanAcc),MeanAcc)
match(max(MeanAcc), MeanAcc)
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = 9)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = 9)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
iterations = 100
numks = 100
splitPerc = .70
set.seed(33)
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(buzzbrews)[1],round(splitPerc * dim(buzzbrews)[1]))
train = buzzbrews[trainIndices,]
test = buzzbrews[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = i)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
match(max(MeanAcc), MeanAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
kvalue = match(max(MeanAcc), MeanAcc)
kvalue
max(MeanAcc)
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
iterations
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = sqrt(dim(buzzbrews)[1]))
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = 3)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
table(classifications, test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
classifications
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
table(classifications, test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
classifications
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
table(classifications, train$IPAAle)
CM = confusionMatrix(table(classifications,train$IPAAle))
classifications
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,test$IPAAle, prob = TRUE, k = kvalue)
table(classifications, test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
classifications
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
table(classifications, test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
table(classifications, train$IPAAle)
CM = confusionMatrix(table(classifications,train$IPAAle))
classifications
CM
?knn
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
table(classifications, train$IPAAle)
CM = confusionMatrix(table(classifications,train$IPAAle))
classifications
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications1 = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
table(classifications1, train$IPAAle)
CM1 = confusionMatrix(table(classifications1,train$IPAAle))
classifications1
CM1
len(classifications1)
dim(classifications1)
str(classifications1)
len(train$IPAAle)
length(train$IPAAle)
length(classifications1)
?table
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifications
length(classifications)
length(train$IPAAle)
str(classifications)
names(classifications)
head(classifications)
classifications
dim(classifications)
classifications[1]
classifications[,1]
classifications[2]
table(classifications)
summary(classifications)
classifications
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
dim(test)
length(classifications)
test$IPAAle[1]
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
table(classifications, train$IPAAle)
CM = confusionMatrix(table(classifications,train$IPAAle))
classifications
classifications[4]
classifyMyBeers$IPAAle <- classifications
classifyMyBeers
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifyMyBeers$IPAAle <- classifications
table(classifications, classifyMyBeers$IPAAle)
CM = confusionMatrix(table(classifications,classifyMyBeers$IPAAle))
classifications
CM
for(i in 1:200)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifications
view(classifications)
levels(classifications)
?factor
labels(classifications)
attr(classifications)
?attr
attr(classifications,"Ale")
attr(classifications,"IPA")
classifications["Ale"]
class(classifications)
classifications[1,2]
classifications[1]
classifications(1)
classifications[1:3]
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
for(i in 1:iterations)
{
knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
}
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifications
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifications
table(classifications)
classifications[Ale]
classifications["Ale"]
classifications[4]
as.numeric(classifications)
as.numeric(levels(classifications)[classifications])
classifications
attributes(classifications)
prob(classifications)
classifications$prob
?attributes
IPAAleSummary <- buzzbrews %>%
group_by(IPAAle) %>%
dplyr::summarise(ABV.min = min(ABV),
ABV.med = median(ABV),
ABV.max = max(ABV),
IBU.min = min(IBU),
IBU.med = median(IBU),
IBU.max = max(IBU))
IPAAleSummary
