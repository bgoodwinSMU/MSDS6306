#Make beer count to keep track of total in each style
styleCount$beerCount <- 0
#Make column for total ibus
styleCount$totalIBU <- 0
styleCount$meanABV <- 0
styleCount$ABVbeerCount <- 0
styleCount$totalABV <- 0
#Checking
#View(styleCount)
#styleCount <- styleCount[-c(1), ]
#View(styleCount)
#Calculate mean IBU for each category and store it in IBU df
#Calculate average IBU for each style and add it to df
#outer loop for all the beers
ibuSum <- 0
beerCount <- 0
i <- 1
for (i in 1:iterations) {
if(is.na(buzzbrews[i,8])) {
buzzbrews[i,8]=0
}
#inner for each style
for (j in 1:100) {
if(buzzbrews[i,9]==styleCount[j,1]){
#Compute IBU sum
styleCount[j,4] <- styleCount[j,4]+buzzbrews[i,8]
#Total of each beer count
styleCount[j,3] <- styleCount[j,3]+1
if(buzzbrews[i,8]==0){
styleCount[j,3] <- styleCount[j,3]-1
}
}
#Mean IBU for each style
styleCount[j,2] <- styleCount[j,4]/styleCount[j,3]
}}
#Add average column from style count to buzzbrews df
for (i in 1:iterations) {
if(buzzbrews[i,8]==0){
for(j in 1:100){
if(buzzbrews[i,9]==styleCount[j,1]){
buzzbrews[i,8]=styleCount[j,2]
}
}
}
}
# View(styleCount)
# View(buzzbrews)
# Now do it all again for ABV
# Calculate average ABV for each style and add it to df
# outer loop for all the beers
AlcSum <- 0
AlcVeerCount <- 0
i <- 1
for (i in 1:iterations) {
if(is.na(buzzbrews[i,7])) {
buzzbrews[i,7]=0
}
#inner for each style
for (j in 1:100) {
if(buzzbrews[i,9]==styleCount[j,1]){
#Compute ALC sum
styleCount[j,7] <- styleCount[j,7]+buzzbrews[i,7]*100
#Total of each beer count
styleCount[j,6] <- styleCount[j,6]+1
if(buzzbrews[i,7]==0){
styleCount[j,6] <- styleCount[j,6]-1
}
}
#Mean ABV for each style
styleCount[j,5] <- (styleCount[j,7]/styleCount[j,6])/100
}
}
#Add average column from style count to buzzbrews df
for (i in 1:iterations) {
if(buzzbrews[i,7]==0){
for(j in 1:100){
if(buzzbrews[i,9]==styleCount[j,1]){
buzzbrews[i,7]=styleCount[j,5]
}
}
}
}
#kill NaN's for other alcohol types with no hops
i <- 1
for(i in 1:iterations){
if(is.na(buzzbrews[i,8])){
buzzbrews[i,8] <- 0
}
}
#Check out end results
buzzbrews <- merge(buzzbrews, regionData, by = "State")
View(buzzbrews)
# Chunk 6
######################
#                    #
#     Question 4     #
#                    #
######################
#################################################################################################################
# Question 4 - Compute the median alcohol content and international bitterness unit for
# each state. Plot a bar chart to compare.
#
# We computed the MedStateABV and IBU for each state and created a visualisation that allowed
# us to further explore what those medians tell us. We found there appears to be a relationship
# between IBU and ABV where we can use IBU to estimate ABV of a given beer.
#
# We explored this further by developing a model to make predictions based on historical IBU
# and ABV data and were able to predict that a beer with 32 IBU could have an ABV of 5.72% and
# we were 97.5% confident that beer would at least fall between 3.24% and 8.21%.
#
#################################################################################################################
buzzbrews$State <- trimws(buzzbrews$State)
# Group by state and compute
combineddf <- buzzbrews %>%
group_by(State) %>%
dplyr::summarise(MedStateIBU = median(IBU), MedStateABV = median(ABV))
combineddf <- as.data.frame(combineddf)
combineddf$MedStateIBU <- as.numeric(combineddf$MedStateIBU)
combineddf$MedStateABV <- as.numeric(combineddf$MedStateABV)
# Divisional measurements
divisiondf <- buzzbrews %>%
group_by(Division) %>%
dplyr::summarise(MedDivIBU = median(IBU), MedDivABV = median(ABV))
# round values to xx.x ###
divisiondf$MedDivIBU <- round(divisiondf$MedDivIBU, digits = 1)
divisiondf$MedDivABV <- round(divisiondf$MedDivABV, digits = 1)
combineddf$MedStateIBU <- round(combineddf$MedStateIBU, digits = 1)
combineddf$MedStateABV <- round(combineddf$MedStateABV, digits = 1)
# Add regions to combinddf
combineddf <- merge(combineddf,regionData,by="State")
# Add in divisional values
combineddf <- merge(combineddf, divisiondf, by = "Division")
####### Create chart labels for stacked charts #####
combineddf$ABVlabel <- paste(combineddf$State, combineddf$MedStateABV)
combineddf$IBUlabel <- paste(combineddf$State, combineddf$MedStateIBU)
view(combineddf)
# Create sums of medians for labeling charts #
StateSums <- combineddf %>%
group_by(Division) %>%
dplyr::summarise(SumStateABV = sum(MedStateABV), SumStateIBU = sum(MedStateIBU))
combineddf <- merge(combineddf, StateSums, by = "Division")
#
############################################################
#########                                   ################
######### Draw Bar Chart = Median State ABV ################
#########                                   ################
############################################################
#
combineddf %>%
ggplot(aes(x=Division, y=MedStateABV,fill= reorder(State,-MedStateABV))) +
# Create stacked by chart organized by Division with States stacked in each bar
geom_bar(aes(color = "#c8102e"),stat="identity", width= 0.7, position = position_stack(), show.legend = FALSE) +
# Add state and ABV value to each state's chart position
geom_text(aes(label = ABVlabel), size = 3, position = position_stack(vjust = 0.5)) +
# Add Division ABV Values to top of each chart stack
geom_text(aes(Division, MedDivABV + SumStateABV -3, label = MedDivABV), size = 3, vjust = 1, fontface = "italic") +
# Label the chart objects
labs(title="Median ABV by State by US Census Division in the USA",
subtitle="Budweiser Consultation",
caption="source: ABV. ABV imputed where necessary.",
y = "Alcohol By Volume",
x = "States by US Census Divisions ") +
theme_classic() +
# Adjust the X-axis labels, remove y-labels since this is a stacked chart
theme(axis.text.x = element_text(angle=90, vjust = 0.5,hjust = 1),
axis.text.y = element_blank(), axis.ticks = element_blank())
#
##### Create bar plot for IBU #####
#
combineddf %>%
ggplot(aes(x=Division, y=MedStateIBU,fill= reorder(State,-MedStateIBU))) +
# Create stacked by chart organized by Division with States stacked in each bar
geom_bar(aes(color = "#c8102e"),stat="identity", width= 0.7, position = position_stack(), show.legend = FALSE) +
# Add state and IBU value to each state's chart position
geom_text(aes(label = IBUlabel), size = 3, position = position_stack(vjust = 0.5)) +
# Add Division IBU Values to top of each chart stack
geom_text(aes(Division, MedDivIBU + SumStateIBU - 15, label = MedDivIBU), size = 3, vjust = 1, fontface = "italic") +
# Label the chart objects
labs(title="Median IBU by State by US Census Division in the USA",
subtitle="Budweiser Consultation",
caption="source: IBU. IBU imputed where necessary.",
y = "Median Int'l Bitterness Unit",
x = "States by US Census Divisions ") +
theme_classic() +
# Adjust the X-axis labels, remove y-labels since this is a stacked chart
theme(axis.text.x = element_text(angle=90, vjust = 0.5,hjust = 1),
axis.text.y = element_blank(), axis.ticks = element_blank())
#
#
####################################################
##                                                ##
## Scatterplot MedStateIBU vs MedStateABV by State  ##
##                                                ##
####################################################
## Calculate slope and intercept of line of best fit ##
abline_values <- coef(lm(MedStateABV ~ MedStateIBU, combineddf))
#  (Intercept) MedStateABV
#   14.5377926    0.4013998
ggplot(combineddf,aes(x = MedStateIBU, y = MedStateABV, color = State)) +
geom_point(show.legend = FALSE) +
# Add ABLine to the chart to see if there is a linear relationship
geom_abline(intercept = abline_values[1] , slope = abline_values[2] , color = "#c8102E", size = 1) +
# Add state labels, but only for outliers
geom_text(data = subset(combineddf,MedStateIBU > 45 | MedStateABV < 4.5,
select = c(State, MedStateIBU, MedStateABV)),
aes(label = State), vjust= -0.6, size = 3, na.rm = TRUE,
show.legend = FALSE, color = "#000000") +
theme_classic() +
labs(title = "Median State ABV vs Median State IBU",
subtitle = "Budweiser Consultation",
y = "Median Alcoholic By Vol",
x = "Median Int'l Bitterness Unit",
caption = "NOTE: Missing ABV and IBU values imputed")
# Chunk 7
######################
#                    #
#     Question 5     #
#                    #
######################
#############################################################################################################
# Question 5 - Which state has the maximum alcoholic (ABV) beer? Which state has the most bitter (IBU) beer?
#
# We determined that the maximum observed IBU was 138 in Oregon for Bitter Bitch Imperial IPA that
# is an American Double/ Imperial IPA from the Astoria Brewing Company in Austoria, OR.
#
# We also determined that maximum observed ABV was 12.8% in Colorado for Lee Hill Series Vol. 5 –
# Belgian Style Quadrupel Ale from Upslope Brewing Company in Boulder, CO.
#
#############################################################################################################
#Figure out which has highest ABV
MaxStateABV <- arrange(buzzbrews, desc(ABV))
print(MaxStateABV[1,4])
#Figure out which has highest IBU
maxIBU <- arrange(buzzbrews,desc(IBU))
print(maxIBU[1,4])
##### Question 5 Answer #####
## Colorado has the highest ABV = 12.8, Oregon has the highest IBU = 138.
###################################################
###### Create DF for just the max ABV & IBU values ######
# State measurements
maxStateValues <- buzzbrews %>%
group_by(State) %>%
dplyr::count(MaxStateABV = max(ABV), MaxStateIBU = max(IBU))
maxStateValues <- maxStateValues[,-4]
maxStateValues <- as.data.frame(maxStateValues)
maxStateValues$State <- trimws(maxStateValues$State)
str(maxStateValues)
view(maxStateValues)
# Divisional measurements
divMaxValdf <- buzzbrews %>%
group_by(Division) %>%
dplyr::count(MaxDivABV = max(ABV), MaxDivIBU = max(IBU))
divMaxValdf <- divMaxValdf[,-4]
divMaxValdf <- as.data.frame(divMaxValdf)
# round values to xx.x ###
maxStateValues$MaxStateABV <- round(maxStateValues$MaxStateABV, digits = 1)
maxStateValues$MaxStateIBU <- round(maxStateValues$MaxStateIBU, digits = 1)
# Add regions to maxStateValues
maxStateValues <- merge(maxStateValues,regionData,by="State")
# Add in divisional values
maxStateValues <- merge(maxStateValues, divMaxValdf, by = "Division")
####### Create chart labels for stacked charts #####
maxStateValues$ABVmaxLabel <- paste(maxStateValues$State, maxStateValues$MaxStateABV)
maxStateValues$IBUmaxLabel <- paste(maxStateValues$State, maxStateValues$MaxStateIBU)
view(maxStateValues)
# Create sums of max values for labeling charts #
StateMaxSums <- maxStateValues %>%
group_by(Division) %>%
dplyr::summarise(SumStateABV = sum(MaxStateABV), SumStateIBU = sum(MaxStateIBU))
maxStateValues <- merge(maxStateValues, StateMaxSums, by = "Division")
###################################################
###### Plot for Max ABV ###########################
maxStateValues %>%
ggplot(aes(x=Division, y=MaxStateABV,fill= reorder(State,-MaxStateABV))) +
# Create stacked by chart organized by Division with States stacked in each bar
geom_bar(aes(color = "#c8102e"),stat="identity", width= 0.7, position = position_stack(), show.legend = FALSE) +
# Add state and ABV value to each state's chart position
geom_text(aes(label = ABVmaxLabel), size = 3, position = position_stack(vjust = 0.5)) +
# Add Division ABV Values to top of each chart stack
geom_text(aes(Division, MaxDivABV + SumStateABV, label = MaxDivABV), size = 3, nudge_y = -7, fontface = "italic") +
# Label the chart objects
labs(title="Max ABV by State by US Census Division in the USA",
subtitle="Budweiser Consultation",
caption="source: ABV. ABV imputed where necessary.",
y = "Alcohol By Volume",
x = "States by US Census Divisions ") +
theme_classic() +
# Adjust the X-axis labels, remove y-labels since this is a stacked chart
theme(axis.text.x = element_text(angle=90, vjust = 0.5,hjust = 1),
axis.text.y = element_blank(), axis.ticks = element_blank())
###################################################
############### Chart Max IBU #####################
maxStateValues %>%
ggplot(aes(x=Division, y=MaxStateIBU,fill= reorder(State,-MaxStateIBU))) +
# Create stacked by chart organized by Division with States stacked in each bar
geom_bar(aes(color = "#c8102e"),stat="identity", width= 0.7, position = position_stack(), show.legend = FALSE) +
# Add state and ABV value to each state's chart position
geom_text(aes(label = IBUmaxLabel), size = 3, position = position_stack(vjust = 0.5)) +
# Add Division ABV Values to top of each chart stack
geom_text(aes(Division, MaxDivIBU + SumStateIBU, label = MaxDivIBU), size = 3, nudge_y = -75, fontface = "italic") +
# Label the chart objects
labs(title="Max IBU by State by US Census Division in the USA",
subtitle="Budweiser Consultation",
caption="source: IBU imputed where necessary.",
y = "Alcohol By Volume",
x = "States by US Census Divisions ") +
theme_classic() +
# Adjust the X-axis labels, remove y-labels since this is a stacked chart
theme(axis.text.x = element_text(angle=90, vjust = 0.5,hjust = 1),
axis.text.y = element_blank(), axis.ticks = element_blank())
# Chunk 8
######################
#                    #
#     Question 6     #
#                    #
######################
#############################################################################################################
# Question 6 - Comment on the summary statistics and distribution of the ABV variable.
#
# We observed summary statistics from the ABV data showing that once we filled in the missing
# values as best as we could, there was a range of 0.10% to 12.80% with a median of 5.65% (median
# is simply the middle value if we were to arrange all the ABVs in either decending or ascending order).
#
# We also found a very common range within the overall range that went from 5.0% ABV to 6.70% ABV and
# upon further review noticed this is where many commonly mass produced beers fall, for example: Bud
# Ice (5.5%), Bud Light Platinum (6%), Natural Ice (5.9%), Bud Ice (5.5%), Budweiser (5%), Blue Moon
# (5%), Stella Artois (5%), Heinekin (5%), Pabst Blue Ribbon (4.74%) and Miller Genuinine Draft (4.6%).
#
#############################################################################################################
# Check on the distribution of ABV
hist(buzzbrews$ABV, col = "#c8102e",
main = "Histogram of ABV Distribution",
sub = "Busweiser Consultation",
xlab = "ABV Ratings")
densityABV <- density(buzzbrews$ABV)
plot(densityABV,
main = "Kernel Density of Alcohol By Volume",
sub = "Budweiser Consultation",
xlab = "ABV Ratings")
polygon(densityABV, col = "#c8102e")
ABVsummary <- summary(buzzbrews$ABV)
ABVsummary
############### Not sure what we want to do down here ##################
#ABVSumNames <- names(ABVsummary)
#ABVSumNames <- as.factor(ABVSumNames)
#ABVsummary <- as.list(unname(ABVsummary))
#ABVsum <- data.frame(ABVsummary)
#ABVsum <- (ABVSumNames)
#as.data.frame(ABVsum)
#ABVsum <- rename(ABVsum, "Summary"="", "Value"="ABVsummary")
########################################################################
# Chunk 9
######################
#                    #
#     Question 7     #
#                    #
######################
#############################################################################################################
# Question 7 - Is there an apparent relationship between the bitterness of the beer and its
# alcoholic content? Draw a scatter plot.  Make your best judgment of a relationship and
# EXPLAIN your answer.
#
# We used a scatter plot to viusally explore if there is any sort of relationship between
# IBU and ABV, in other words can IBU determine ABV or can ABV be used to determine IBU.
# There was evidence of a positive relationship, but and we will discuss this further shortly,
# it appears one can potentially predict the other.
#
#############################################################################################################
## Calculate slope and intercept of line of best fit ##
comparisonCoef <- coef(lm(ABV ~ IBU, buzzbrews))
comparisonCoef
#  (Intercept)    MaxIBU
#   4.71799073  0.03142639
buzzbrews %>%
ggplot(aes(x = IBU, y = ABV, color = "#c8102e")) +
geom_point(show.legend = FALSE, na.rm = TRUE) +
geom_abline(intercept =  comparisonCoef[1] , slope = comparisonCoef[2], color = "#c8102E", size = 1) +
theme_classic() +
labs(title = "IBU vs ABV",
subtitle = "Budweiser Consultation",
y = "Alcoholic By Volume",
x = "Int'l Bitterness Unit",
caption="ABV and IBU values imputed where necessary.")
# Chunk 10
######################
#                    #
#     Question 8     #
#                    #
######################
#############################################################################################################
# Question 8 - .  Budweiser would also like to investigate the difference with respect to IBU and ABV
# between IPAs (India Pale Ales) and other types of Ale (any beer with “Ale” in its name other than IPA).
# You decide to use KNN classification to investigate this relationship.  Provide statistical evidence one
# way or the other. You can of course assume your audience is comfortable with percentages … KNN is very easy
# to understand conceptually.
# In addition, while you have decided to use KNN to investigate this relationship (KNN is required) you may
# also feel free to supplement your response to this question with any other methods or techniques you have
# learned.  Creativity and alternative solutions are always encouraged.
#
# Response:
# We built a kNN (nearest neighbor) classifier to see if there is a difference between IPA and Ale, and while
# we were at it, we also added in a third class called, "neither." In building the kNN, we wanted to explore
# what the appropriate number of "neighbors" was to compare to since there is so many observations so close
# together (think New York city and all the noise generated). We found that generally 8 neighbors were the
# best estimation (we randomly parsed the data 100 times to find the best neighbors value).
#
# Our classifier was accurate in determining if a beer was an Ale, IPA or neither about 64.5% of the time
# when we used 8 nearest neighbors.
# Next we created some random pairings of IBU and ABV to see how the classifier handled the data and discovered
# it again was about 64.5% accurate. It is far more accurate identifyly neither style of beer 78% of the time,
# then IPAs 67.5% of the time and Ale's 26% of the time.
# We also look a look at the ranges for IBU and ABV for each of the 3 broad types of beers IPA, Ale or
# "neither" and found the following results, showing that it should be more difficult to predict between
# the 3 different types of beers.
#
# IPAAle  ABV.min ABV.med ABV.max IBU.min IBU.med IBU.max
# Ale         3.5     5.4    12.8       7    31       120
# IPA         4       6.7     9.9      19    67.6     138
# neither     0.1     5.5    12.5       0    28       130
#
# Additionally we re-visualized the plot chart with a regression line from the previous question, this
# time showing the plots colored based on the classification of Ale, IPA or neither.
#
#############################################################################################################
#Label Ales, IPAs and neither
buzzbrews$IPAAle = case_when(grepl("\\bIPA\\b", buzzbrews$Beer, ignore.case = TRUE) ~ "IPA",
grepl("\\bindia pale ale\\b", buzzbrews$Beer, ignore.case = TRUE) ~ "IPA",
grepl("\\bale\\b", buzzbrews$Beer, ignore.case = TRUE ) ~ "Ale",
TRUE ~ "neither")
view(buzzbrews)
##### Find the best value of K and train the model ##############
iterations = 100
numks = 25
splitPerc = .70
set.seed(33)
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(buzzbrews)[1],round(splitPerc * dim(buzzbrews)[1]))
train = buzzbrews[trainIndices,]
test = buzzbrews[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = i)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
# Visually find the best value of k by using it's location in the dataframe based on the highest Mean value
plot(seq(1,numks,1),MeanAcc, type = "l",
col = "#c8201e",
main = "Value for K Neighbors vs Accuracy",
sub = "Budweiser Consultation",
xlab = "Value of K Neighbors",
ylab = "Accuracy Rate (Percentage)")
# Locate the value of k based on the best MeanAcc in the dataframe
kvalue = match(max(MeanAcc), MeanAcc)
max(MeanAcc)
kvalue
####### Best value of k = 8 between 59% - 67% Accuracy #####################
####### Train the model using k = 8 #####################
classifications = knn(train[,c(7,8)],test[,c(7,8)],train$IPAAle, prob = TRUE, k = kvalue, use.all = TRUE)
table(classifications,test$IPAAle)
CM = confusionMatrix(table(classifications,test$IPAAle))
CM
####### Test the Classifier with some random data ###
classifyMyBeers <- data.frame(ABV = c(6,6,5,4,5, 12, 7),
IBU = c(78, 65, 55, 38, 100, 148, 98))
classifications = knn(train[,c(7,8)],classifyMyBeers,train$IPAAle, prob = TRUE, k = kvalue)
classifications
############ Test Results #######################
#Class: neither   Ale       Ale       neither   IPA       neither   IPA
#Prob:  0.6250000 0.6250000 0.6250000 0.7500000 0.7500000 0.5000000 0.7777778
##################################################
############# Summary data by classification #############
IPAAleSummary <- buzzbrews %>%
group_by(IPAAle) %>%
dplyr::summarise(ABV.min = min(ABV),
ABV.med = median(ABV),
ABV.max = max(ABV),
IBU.min = min(IBU),
IBU.med = median(IBU),
IBU.max = max(IBU))
IPAAleSummary
########################################################
##### Replot and color by beer style ###################
comparisonCoef <- coef(lm(ABV ~ IBU, buzzbrews))
comparisonCoef
#  (Intercept)    MaxIBU
#   4.71799073  0.03142639
buzzbrews %>%
ggplot(aes(x = IBU, y = ABV, color = IPAAle)) +
geom_point(show.legend = TRUE, na.rm = TRUE) +
geom_abline(intercept =  comparisonCoef[1] , slope = comparisonCoef[2], color = "#c8102E", size = 1) +
theme_classic() +
labs(title = "IBU vs ABV",
subtitle = "Budweiser Consultation",
y = "Alcoholic By Volume",
x = "Int'l Bitterness Unit",
caption="ABV and IBU values imputed where necessary.")
# Chunk 11
######################
#                    #
#     Question 9     #
#                    #
######################
#############################################################################################################
#Knock their socks off!  Find one other useful inference from the data that you feel Budweiser may be able to find value in.  You must convince them why it is important and back up your conviction with appropriate statistical evidence.
#############################################################################################################
